# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LineType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, path: str=None, number: int=None, hits: int=None):  # noqa: E501
        """LineType - a model defined in Swagger

        :param path: The path of this LineType.  # noqa: E501
        :type path: str
        :param number: The number of this LineType.  # noqa: E501
        :type number: int
        :param hits: The hits of this LineType.  # noqa: E501
        :type hits: int
        """
        self.swagger_types = {
            'path': str,
            'number': int,
            'hits': int
        }

        self.attribute_map = {
            'path': 'path',
            'number': 'number',
            'hits': 'hits'
        }
        self._path = path
        self._number = number
        self._hits = hits

    @classmethod
    def from_dict(cls, dikt) -> 'LineType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LineType of this LineType.  # noqa: E501
        :rtype: LineType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this LineType.


        :return: The path of this LineType.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this LineType.


        :param path: The path of this LineType.
        :type path: str
        """

        self._path = path

    @property
    def number(self) -> int:
        """Gets the number of this LineType.


        :return: The number of this LineType.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number: int):
        """Sets the number of this LineType.


        :param number: The number of this LineType.
        :type number: int
        """

        self._number = number

    @property
    def hits(self) -> int:
        """Gets the hits of this LineType.


        :return: The hits of this LineType.
        :rtype: int
        """
        return self._hits

    @hits.setter
    def hits(self, hits: int):
        """Sets the hits of this LineType.


        :param hits: The hits of this LineType.
        :type hits: int
        """
        if hits is None:
            raise ValueError("Invalid value for `hits`, must not be `None`")  # noqa: E501

        self._hits = hits
