# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.class_type import ClassType  # noqa: F401,E501
from swagger_server import util


class PackageType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, path: str=None, line_rate: int=None, branch_rate: int=None, complexity: int=None, classes: List[ClassType]=None):  # noqa: E501
        """PackageType - a model defined in Swagger

        :param path: The path of this PackageType.  # noqa: E501
        :type path: str
        :param line_rate: The line_rate of this PackageType.  # noqa: E501
        :type line_rate: int
        :param branch_rate: The branch_rate of this PackageType.  # noqa: E501
        :type branch_rate: int
        :param complexity: The complexity of this PackageType.  # noqa: E501
        :type complexity: int
        :param classes: The classes of this PackageType.  # noqa: E501
        :type classes: List[ClassType]
        """
        self.swagger_types = {
            'path': str,
            'line_rate': int,
            'branch_rate': int,
            'complexity': int,
            'classes': List[ClassType]
        }

        self.attribute_map = {
            'path': 'path',
            'line_rate': 'line-rate',
            'branch_rate': 'branch-rate',
            'complexity': 'complexity',
            'classes': 'classes'
        }
        self._path = path
        self._line_rate = line_rate
        self._branch_rate = branch_rate
        self._complexity = complexity
        self._classes = classes

    @classmethod
    def from_dict(cls, dikt) -> 'PackageType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PackageType of this PackageType.  # noqa: E501
        :rtype: PackageType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this PackageType.


        :return: The path of this PackageType.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this PackageType.


        :param path: The path of this PackageType.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def line_rate(self) -> int:
        """Gets the line_rate of this PackageType.


        :return: The line_rate of this PackageType.
        :rtype: int
        """
        return self._line_rate

    @line_rate.setter
    def line_rate(self, line_rate: int):
        """Sets the line_rate of this PackageType.


        :param line_rate: The line_rate of this PackageType.
        :type line_rate: int
        """

        self._line_rate = line_rate

    @property
    def branch_rate(self) -> int:
        """Gets the branch_rate of this PackageType.


        :return: The branch_rate of this PackageType.
        :rtype: int
        """
        return self._branch_rate

    @branch_rate.setter
    def branch_rate(self, branch_rate: int):
        """Sets the branch_rate of this PackageType.


        :param branch_rate: The branch_rate of this PackageType.
        :type branch_rate: int
        """

        self._branch_rate = branch_rate

    @property
    def complexity(self) -> int:
        """Gets the complexity of this PackageType.


        :return: The complexity of this PackageType.
        :rtype: int
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity: int):
        """Sets the complexity of this PackageType.


        :param complexity: The complexity of this PackageType.
        :type complexity: int
        """

        self._complexity = complexity

    @property
    def classes(self) -> List[ClassType]:
        """Gets the classes of this PackageType.


        :return: The classes of this PackageType.
        :rtype: List[ClassType]
        """
        return self._classes

    @classes.setter
    def classes(self, classes: List[ClassType]):
        """Sets the classes of this PackageType.


        :param classes: The classes of this PackageType.
        :type classes: List[ClassType]
        """
        if classes is None:
            raise ValueError("Invalid value for `classes`, must not be `None`")  # noqa: E501

        self._classes = classes
